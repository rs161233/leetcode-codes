Top 50 Java Coding Interview Questions
ðŸ”¹ 1. String Manipulation
1.	Reverse a string without using built-in reverse(). done
2.	Check if a string is a palindrome.
3.	Find the first non-repeating character in a string.
4.	Count occurrences of each character in a string.
5.	Check if two strings are anagrams.
6.	Remove duplicate characters from a string.
7.	Find the longest substring without repeating characters.
8.	Find all permutations of a string.
9.	Implement substring search (like indexOf).
10.	Compress a string (e.g., "aaabb" â†’ "a3b2").
________________________________________
ðŸ”¹ 2. Arrays
11.	Find the largest and smallest element in an array.
12.	Reverse an array in-place.
13.	Find the second largest element in an array.
14.	Move all zeros to the end of an array.
15.	Find the missing number in an array of 1â€¦n.
16.	Find duplicates in an array.
17.	Merge two sorted arrays.
18.	Find the intersection of two arrays.
19.	Rotate an array by k steps.
20.	Find the majority element in an array.
________________________________________
ðŸ”¹ 3. Searching & Sorting
21.	Implement Binary Search.
22.	Implement QuickSort.
23.	Implement MergeSort.
24.	Implement Bubble Sort / Insertion Sort.
25.	Find kth largest element in an array.
________________________________________
ðŸ”¹ 4. Numbers & Math
26.	Check if a number is prime.
27.	Find the GCD and LCM of two numbers.
28.	Generate Fibonacci series up to n terms.
29.	Check if a number is an Armstrong number.
30.	Find factorial using recursion.
31.	Count number of digits in an integer.
32.	Reverse a number.
33.	Check if a number is palindrome.
34.	Find the sum of digits of a number.
35.	Find the square root of a number without using library.
________________________________________
ðŸ”¹ 5. Collections / Hashing
36.	Find first non-repeated element using HashMap.
37.	Implement LRU Cache.
38.	Sort a map by values.
39.	Detect cycle in a linked list using HashSet.
40.	Find intersection of two linked lists.
________________________________________
ðŸ”¹ 6. Linked List
41.	Reverse a linked list.
42.	Detect a cycle in linked list.
43.	Find middle element of linked list.
44.	Merge two sorted linked lists.
45.	Remove nth node from end of linked list.
________________________________________
ðŸ”¹ 7. Stack & Queue
46.	Implement stack using arrays/linked list.
47.	Implement queue using stacks.
48.	Check for balanced parentheses using stack.
49.	Implement Min Stack (stack with O(1) min).
50.	Implement circular queue.

